# -*- coding: utf-8 -*-
"""Tensorflow.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16sabo3q6k6kwThk_SmzxGR7Oe8EamvmF

La forma de importar tensorlow se debe a que por defecto funciona TF2, donde ya no existe el atributo placeholder
"""

import tensorflow.compat.v1 as tf
tf.disable_v2_behavior() 
import numpy as np
import matplotlib.pyplot as plt

"""Mismo ejemplo que ya hemos usado antes"""

Nclass = 500
D = 2
M = 3
K = 3

X1 = np.random.randn(Nclass, D) + np.array([0,-2])
X2 = np.random.randn(Nclass, D) + np.array([2,2])
X3 = np.random.randn(Nclass, D) + np.array([-2,2])
X = np.vstack([X1,X2,X3]).astype(np.float32)

Y = np.array([0]*Nclass + [1]*Nclass + [2]*Nclass)

plt.scatter(X[:,0],X[:,1], c=Y, s=30, alpha=0.3);
plt.show()

N = len(Y)
T = np.zeros((N,K))
for i in range(N):
  T[i,Y[i]] = 1

"""Ahora introducimos el código propio de Tensorflow, empezando por una función para inicializar los pesos"""

def init_weights(shape):
  return tf.Variable(tf.random_normal(shape, stddev=0.01))

"""Y la función forward con Tensorflow"""

def forward(X, W1, b1, W2, b2):
  Z = tf.nn.sigmoid(tf.matmul(X, W1)+b1)
  return tf.matmul(Z, W2) + b2

"""Tensorflow usa placeholder para los datos"""

tfX = tf.placeholder(tf.float32, [None, D])
tfY = tf.placeholder(tf.float32, [None, K])

"""Ahora inicializamos los pesos con la función anterior"""

W1 = init_weights([D,M])
b1 = init_weights([M])
W2 = init_weights([M,K])
b2 = init_weights([K])

"""Y decimos como calcular el output de la red neuronal, el coste, gradient descent, train y predict"""

logits = forward(tfX, W1, b1, W2, b2)

cost = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits_v2(
        labels = tfY,
        logits = logits,
    )
)

train_op = tf.train.GradientDescentOptimizer(0.05).minimize(cost)

predict_op = tf.argmax(logits, 1)

"""Las sesiones son simplemente un detalle de implementación de TF1. Otras librerías no lo tienen y TF2 tampoco trabaja ya con esta parte del código"""

sess = tf.Session()
init = tf.global_variables_initializer()
sess.run(init)

"""Y ya podemos realizar el bucle principal"""

for i in range(1000):
  sess.run(train_op, feed_dict={tfX: X, tfY: T})
  pred = sess.run(predict_op, feed_dict={tfX: X})
  if i % 100 == 0:
    print("Accuracy", np.mean(Y==pred))