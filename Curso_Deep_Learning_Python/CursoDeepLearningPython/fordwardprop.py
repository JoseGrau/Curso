# -*- coding: utf-8 -*-
"""fordwardprop.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zW7KMxYKVSX9L_jSt5rmUAIbucq0eioe

**Construyendo Feedfordward Neural Network**

Creación y representación de datos a partir de tres distribuciones normales
"""

import numpy as np
import matplotlib.pyplot as plt

Nclass = 500

X1 = np.random.randn(Nclass,2) + np.array([0,-2])
X2 = np.random.randn(Nclass,2) + np.array([2,2])
X3 = np.random.randn(Nclass,2) + np.array([-2,2])
X = np.vstack([X1,X2,X3])

Y = np.array([0]*Nclass + [1]*Nclass + [2]*Nclass)

plt.scatter(X[:,0],X[:,1], c=Y, s = 20, alpha=0.5);

"""Utilizamos pesos aleatorios"""

D = 2
M = 3
K = 3

W1 = np.random.randn(D,M)
b1 = np.random.randn(M)
W2 = np.random.randn(M,K)
b2 = np.random.randn(K)

"""Definimos la función forward para mostrar el output de la red neuronal"""

def forward(X, W1, b1, W2, b2):
  Z = 1 / (1 + np.exp(-X.dot(W1)- b1))
  A = np.exp(Z.dot(W2)+b2)
  Y = A / A.sum(axis=1, keepdims=True)
  return Y

"""Función para ver el ratio de acierto en la predicción"""

def classification_rate(Y,P):
  n_correct = 0
  n_total = 0
  for i in range(len(Y)):
    n_total += 1
    if Y[i] == P[i]:
      n_correct += 1
  return n_correct/n_total

"""Y lo probamos todo"""

P_Y_given_X = forward(X,W1,b1,W2,b2)
P = np.argmax(P_Y_given_X, axis=1)

print("Ratio de clasificación con pesos aleatorios:", classification_rate(Y,P))